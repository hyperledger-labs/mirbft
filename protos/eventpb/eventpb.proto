/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package eventpb;

import "requestpb/requestpb.proto";
import "messagepb/messagepb.proto";
import "isspb/isspb.proto";

option go_package = "github.com/hyperledger-labs/mirbft/pkg/pb/eventpb";

// Event represents a state event to be injected into the state machine
message Event {
  // TODO, normalize naming, for instance Complete/Completed
  oneof type {
    Init                 init                   = 1;
    Tick                 tick                   = 2;
    WALAppend            wal_append             = 3;
    WALEntry             wal_entry              = 4;
    WALTruncate          wal_truncate           = 5;
    requestpb.Request    request                = 6;
    HashRequest          hash_request           = 7;
    HashResult           hash_result            = 8;
    RequestReady         request_ready          = 9;
    SendMessage          send_message           = 10;
    MessageReceived      message_received       = 11;
    Deliver              deliver                = 12;
    isspb.ISSEvent       iss                    = 13;
    VerifyRequestSig     verify_request_sig     = 14;
    RequestSigVerified   request_sig_verified   = 15;
    StoreVerifiedRequest store_verified_request = 16;
    AppSnapshotRequest   app_snapshot_request   = 17;
    AppSnapshot          app_snapshot           = 18;

    // Dummy events for testing purposes only.
    PersistDummyBatch persist_dummy_batch   = 101;
    AnnounceDummyBatch announce_dummy_batch = 102;
    StoreDummyRequest store_dummy_request   = 103;
  }

  // A list of follow-up events to process after this event has been processed.
  // This field is used if events need to be processed in a particular order.
  // For example, a message sending event must only be processed
  // after the corresponding entry has been persisted in the write-ahead log (WAL).
  // In this case, the WAL append event would be this event
  // and the next field would contain the message sending event.
  repeated Event next = 100;
}

message Init {}

message Tick {}

message HashRequest {
  repeated bytes data = 1;
  HashOrigin origin = 2;
}

message HashResult {
  bytes digest = 1;
  HashOrigin origin = 2;
}

message HashOrigin {
  oneof type {
    requestpb.Request request = 1;
  }
}

message RequestReady {
  requestpb.RequestRef request_ref = 1;
}

message SendMessage {
  repeated uint64 destinations = 1;
  messagepb.Message msg = 2;
}

message MessageReceived {
  uint64 from = 1;
  messagepb.Message msg = 2;
}

message WALAppend {
  Event event = 1;
  uint64 retention_index = 2;
}

message WALEntry {
  Event event = 1;
}

message WALTruncate {
  uint64 retention_index = 1;
}

message Deliver {
  uint64 sn = 1;
  requestpb.Batch batch = 2;
}

message VerifyRequestSig {
  requestpb.RequestRef request_ref = 1;
  bytes                signature   = 2;
}

message RequestSigVerified {
  requestpb.RequestRef request_ref = 1;
  bool                 valid       = 2;
  string               error       = 3;
}

message StoreVerifiedRequest {
  requestpb.RequestRef request_ref   = 1;
  bytes                data          = 2;
  bytes                authenticator = 3;
}

message AppSnapshotRequest {
  uint64 sn = 1;
}

message AppSnapshot {
  uint64 sn   = 1;
  bytes  data = 2;
}

//==================================================
// Dummy events for testing purposes only.
//==================================================

message StoreDummyRequest {
  requestpb.RequestRef request_ref = 1;
  bytes data = 2;
}

message PersistDummyBatch {
  uint64 sn = 1;
  requestpb.Batch batch = 2;
}

message AnnounceDummyBatch {
  uint64 sn = 1;
  requestpb.Batch batch = 2;
}
