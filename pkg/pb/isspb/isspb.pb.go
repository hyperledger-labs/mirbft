//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: isspb/isspb.proto

package isspb

import (
	isspbftpb "github.com/hyperledger-labs/mirbft/pkg/pb/isspbftpb"
	requestpb "github.com/hyperledger-labs/mirbft/pkg/pb/requestpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ISSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSMessage_Sb
	//	*ISSMessage_Checkpoint
	//	*ISSMessage_RetransmitRequests
	Type isISSMessage_Type `protobuf_oneof:"type"`
}

func (x *ISSMessage) Reset() {
	*x = ISSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSMessage) ProtoMessage() {}

func (x *ISSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSMessage.ProtoReflect.Descriptor instead.
func (*ISSMessage) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{0}
}

func (m *ISSMessage) GetType() isISSMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSMessage) GetSb() *SBMessage {
	if x, ok := x.GetType().(*ISSMessage_Sb); ok {
		return x.Sb
	}
	return nil
}

func (x *ISSMessage) GetCheckpoint() *Checkpoint {
	if x, ok := x.GetType().(*ISSMessage_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *ISSMessage) GetRetransmitRequests() *RetransmitRequests {
	if x, ok := x.GetType().(*ISSMessage_RetransmitRequests); ok {
		return x.RetransmitRequests
	}
	return nil
}

type isISSMessage_Type interface {
	isISSMessage_Type()
}

type ISSMessage_Sb struct {
	Sb *SBMessage `protobuf:"bytes,1,opt,name=sb,proto3,oneof"`
}

type ISSMessage_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,2,opt,name=checkpoint,proto3,oneof"`
}

type ISSMessage_RetransmitRequests struct {
	RetransmitRequests *RetransmitRequests `protobuf:"bytes,3,opt,name=retransmit_requests,json=retransmitRequests,proto3,oneof"`
}

func (*ISSMessage_Sb) isISSMessage_Type() {}

func (*ISSMessage_Checkpoint) isISSMessage_Type() {}

func (*ISSMessage_RetransmitRequests) isISSMessage_Type() {}

type RetransmitRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*requestpb.RequestRef `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *RetransmitRequests) Reset() {
	*x = RetransmitRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetransmitRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetransmitRequests) ProtoMessage() {}

func (x *RetransmitRequests) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetransmitRequests.ProtoReflect.Descriptor instead.
func (*RetransmitRequests) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{1}
}

func (x *RetransmitRequests) GetRequests() []*requestpb.RequestRef {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SBMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64             `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Msg      *SBInstanceMessage `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SBMessage) Reset() {
	*x = SBMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBMessage) ProtoMessage() {}

func (x *SBMessage) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBMessage.ProtoReflect.Descriptor instead.
func (*SBMessage) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{2}
}

func (x *SBMessage) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBMessage) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBMessage) GetMsg() *SBInstanceMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Sn    uint64 `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{3}
}

func (x *Checkpoint) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Checkpoint) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

type SBInstanceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceMessage_PbftPreprepare
	//	*SBInstanceMessage_PbftPrepare
	//	*SBInstanceMessage_PbftCommit
	Type isSBInstanceMessage_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceMessage) Reset() {
	*x = SBInstanceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceMessage) ProtoMessage() {}

func (x *SBInstanceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceMessage.ProtoReflect.Descriptor instead.
func (*SBInstanceMessage) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{4}
}

func (m *SBInstanceMessage) GetType() isSBInstanceMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftPreprepare() *isspbftpb.Preprepare {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftPreprepare); ok {
		return x.PbftPreprepare
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftPrepare() *isspbftpb.Prepare {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftPrepare); ok {
		return x.PbftPrepare
	}
	return nil
}

func (x *SBInstanceMessage) GetPbftCommit() *isspbftpb.Commit {
	if x, ok := x.GetType().(*SBInstanceMessage_PbftCommit); ok {
		return x.PbftCommit
	}
	return nil
}

type isSBInstanceMessage_Type interface {
	isSBInstanceMessage_Type()
}

type SBInstanceMessage_PbftPreprepare struct {
	PbftPreprepare *isspbftpb.Preprepare `protobuf:"bytes,1,opt,name=pbft_preprepare,json=pbftPreprepare,proto3,oneof"`
}

type SBInstanceMessage_PbftPrepare struct {
	PbftPrepare *isspbftpb.Prepare `protobuf:"bytes,2,opt,name=pbft_prepare,json=pbftPrepare,proto3,oneof"`
}

type SBInstanceMessage_PbftCommit struct {
	PbftCommit *isspbftpb.Commit `protobuf:"bytes,3,opt,name=pbft_commit,json=pbftCommit,proto3,oneof"`
}

func (*SBInstanceMessage_PbftPreprepare) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftPrepare) isSBInstanceMessage_Type() {}

func (*SBInstanceMessage_PbftCommit) isSBInstanceMessage_Type() {}

type ISSEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSEvent_PersistCheckpoint
	//	*ISSEvent_StableCheckpoint
	//	*ISSEvent_PersistStableCheckpoint
	//	*ISSEvent_Sb
	Type isISSEvent_Type `protobuf_oneof:"type"`
}

func (x *ISSEvent) Reset() {
	*x = ISSEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSEvent) ProtoMessage() {}

func (x *ISSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSEvent.ProtoReflect.Descriptor instead.
func (*ISSEvent) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{5}
}

func (m *ISSEvent) GetType() isISSEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSEvent) GetPersistCheckpoint() *PersistCheckpoint {
	if x, ok := x.GetType().(*ISSEvent_PersistCheckpoint); ok {
		return x.PersistCheckpoint
	}
	return nil
}

func (x *ISSEvent) GetStableCheckpoint() *StableCheckpoint {
	if x, ok := x.GetType().(*ISSEvent_StableCheckpoint); ok {
		return x.StableCheckpoint
	}
	return nil
}

func (x *ISSEvent) GetPersistStableCheckpoint() *PersistStableCheckpoint {
	if x, ok := x.GetType().(*ISSEvent_PersistStableCheckpoint); ok {
		return x.PersistStableCheckpoint
	}
	return nil
}

func (x *ISSEvent) GetSb() *SBEvent {
	if x, ok := x.GetType().(*ISSEvent_Sb); ok {
		return x.Sb
	}
	return nil
}

type isISSEvent_Type interface {
	isISSEvent_Type()
}

type ISSEvent_PersistCheckpoint struct {
	PersistCheckpoint *PersistCheckpoint `protobuf:"bytes,1,opt,name=persist_checkpoint,json=persistCheckpoint,proto3,oneof"`
}

type ISSEvent_StableCheckpoint struct {
	StableCheckpoint *StableCheckpoint `protobuf:"bytes,2,opt,name=stable_checkpoint,json=stableCheckpoint,proto3,oneof"`
}

type ISSEvent_PersistStableCheckpoint struct {
	PersistStableCheckpoint *PersistStableCheckpoint `protobuf:"bytes,3,opt,name=persist_stable_checkpoint,json=persistStableCheckpoint,proto3,oneof"`
}

type ISSEvent_Sb struct {
	Sb *SBEvent `protobuf:"bytes,4,opt,name=sb,proto3,oneof"`
}

func (*ISSEvent_PersistCheckpoint) isISSEvent_Type() {}

func (*ISSEvent_StableCheckpoint) isISSEvent_Type() {}

func (*ISSEvent_PersistStableCheckpoint) isISSEvent_Type() {}

func (*ISSEvent_Sb) isISSEvent_Type() {}

type ISSHashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ISSHashOrigin_Sb
	//	*ISSHashOrigin_LogEntry
	Type isISSHashOrigin_Type `protobuf_oneof:"type"`
}

func (x *ISSHashOrigin) Reset() {
	*x = ISSHashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISSHashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISSHashOrigin) ProtoMessage() {}

func (x *ISSHashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISSHashOrigin.ProtoReflect.Descriptor instead.
func (*ISSHashOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{6}
}

func (m *ISSHashOrigin) GetType() isISSHashOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ISSHashOrigin) GetSb() *SBHashOrigin {
	if x, ok := x.GetType().(*ISSHashOrigin_Sb); ok {
		return x.Sb
	}
	return nil
}

func (x *ISSHashOrigin) GetLogEntry() *CommitLogEntry {
	if x, ok := x.GetType().(*ISSHashOrigin_LogEntry); ok {
		return x.LogEntry
	}
	return nil
}

type isISSHashOrigin_Type interface {
	isISSHashOrigin_Type()
}

type ISSHashOrigin_Sb struct {
	Sb *SBHashOrigin `protobuf:"bytes,1,opt,name=sb,proto3,oneof"`
}

type ISSHashOrigin_LogEntry struct {
	LogEntry *CommitLogEntry `protobuf:"bytes,2,opt,name=log_entry,json=logEntry,proto3,oneof"`
}

func (*ISSHashOrigin_Sb) isISSHashOrigin_Type() {}

func (*ISSHashOrigin_LogEntry) isISSHashOrigin_Type() {}

// The commitLogEntry type represents an entry of the commit log, the final output of the ordering process.
// Whenever an orderer delivers a batch (or a special abort value),
// it is inserted to the commit log in form of a commitLogEntry.
type CommitLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number at which this entry has been ordered.
	Sn uint64 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`
	// The delivered request batch.
	Batch *requestpb.Batch `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	// The digest (hash) of the batch.
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// A flag indicating whether this entry is an actual request batch (false)
	// or whether the orderer delivered a special abort value (true).
	Aborted bool `protobuf:"varint,4,opt,name=aborted,proto3" json:"aborted,omitempty"`
	// In case Aborted is true, this field indicates the ID of the node
	// that is suspected to be the reason for the orderer aborting (usually the leader).
	// This information can be used by the leader selection policy at epoch transition.
	Suspect uint64 `protobuf:"varint,5,opt,name=suspect,proto3" json:"suspect,omitempty"`
}

func (x *CommitLogEntry) Reset() {
	*x = CommitLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitLogEntry) ProtoMessage() {}

func (x *CommitLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitLogEntry.ProtoReflect.Descriptor instead.
func (*CommitLogEntry) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{7}
}

func (x *CommitLogEntry) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *CommitLogEntry) GetBatch() *requestpb.Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *CommitLogEntry) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *CommitLogEntry) GetAborted() bool {
	if x != nil {
		return x.Aborted
	}
	return false
}

func (x *CommitLogEntry) GetSuspect() uint64 {
	if x != nil {
		return x.Suspect
	}
	return 0
}

type PersistCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn          uint64 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`
	AppSnapshot []byte `protobuf:"bytes,2,opt,name=app_snapshot,json=appSnapshot,proto3" json:"app_snapshot,omitempty"`
}

func (x *PersistCheckpoint) Reset() {
	*x = PersistCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistCheckpoint) ProtoMessage() {}

func (x *PersistCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistCheckpoint.ProtoReflect.Descriptor instead.
func (*PersistCheckpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{8}
}

func (x *PersistCheckpoint) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *PersistCheckpoint) GetAppSnapshot() []byte {
	if x != nil {
		return x.AppSnapshot
	}
	return nil
}

type StableCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Sn    uint64 `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"` // TODO: Some form of checkpoint certificate will need to go here.
}

func (x *StableCheckpoint) Reset() {
	*x = StableCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableCheckpoint) ProtoMessage() {}

func (x *StableCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableCheckpoint.ProtoReflect.Descriptor instead.
func (*StableCheckpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{9}
}

func (x *StableCheckpoint) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *StableCheckpoint) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

// PersistStableCheckpoint needs to be a separate Event from StableCheckpoint, since both are ISSEvents,
// but, the protocol must differentiate between them. While the former will be applied on recovery from the WAL,
// the latter serves as a notification to the ISS protocol when a stable checkpoint has been persisted.
type PersistStableCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StableCheckpoint *StableCheckpoint `protobuf:"bytes,1,opt,name=stable_checkpoint,json=stableCheckpoint,proto3" json:"stable_checkpoint,omitempty"`
}

func (x *PersistStableCheckpoint) Reset() {
	*x = PersistStableCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistStableCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistStableCheckpoint) ProtoMessage() {}

func (x *PersistStableCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistStableCheckpoint.ProtoReflect.Descriptor instead.
func (*PersistStableCheckpoint) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{10}
}

func (x *PersistStableCheckpoint) GetStableCheckpoint() *StableCheckpoint {
	if x != nil {
		return x.StableCheckpoint
	}
	return nil
}

type SBEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64           `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Event    *SBInstanceEvent `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SBEvent) Reset() {
	*x = SBEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBEvent) ProtoMessage() {}

func (x *SBEvent) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBEvent.ProtoReflect.Descriptor instead.
func (*SBEvent) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{11}
}

func (x *SBEvent) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBEvent) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBEvent) GetEvent() *SBInstanceEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type SBInstanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceEvent_Init
	//	*SBInstanceEvent_Deliver
	//	*SBInstanceEvent_MessageReceived
	//	*SBInstanceEvent_PendingRequests
	//	*SBInstanceEvent_Tick
	//	*SBInstanceEvent_CutBatch
	//	*SBInstanceEvent_BatchReady
	//	*SBInstanceEvent_WaitForRequests
	//	*SBInstanceEvent_RequestsReady
	//	*SBInstanceEvent_HashRequest
	//	*SBInstanceEvent_HashResult
	//	*SBInstanceEvent_PbftPersistPreprepare
	//	*SBInstanceEvent_PbftPersistPrepare
	//	*SBInstanceEvent_PbftPersistCommit
	Type isSBInstanceEvent_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceEvent) Reset() {
	*x = SBInstanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceEvent) ProtoMessage() {}

func (x *SBInstanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceEvent.ProtoReflect.Descriptor instead.
func (*SBInstanceEvent) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{12}
}

func (m *SBInstanceEvent) GetType() isSBInstanceEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceEvent) GetInit() *SBInit {
	if x, ok := x.GetType().(*SBInstanceEvent_Init); ok {
		return x.Init
	}
	return nil
}

func (x *SBInstanceEvent) GetDeliver() *SBDeliver {
	if x, ok := x.GetType().(*SBInstanceEvent_Deliver); ok {
		return x.Deliver
	}
	return nil
}

func (x *SBInstanceEvent) GetMessageReceived() *SBMessageReceived {
	if x, ok := x.GetType().(*SBInstanceEvent_MessageReceived); ok {
		return x.MessageReceived
	}
	return nil
}

func (x *SBInstanceEvent) GetPendingRequests() *SBPendingRequests {
	if x, ok := x.GetType().(*SBInstanceEvent_PendingRequests); ok {
		return x.PendingRequests
	}
	return nil
}

func (x *SBInstanceEvent) GetTick() *SBTick {
	if x, ok := x.GetType().(*SBInstanceEvent_Tick); ok {
		return x.Tick
	}
	return nil
}

func (x *SBInstanceEvent) GetCutBatch() *SBCutBatch {
	if x, ok := x.GetType().(*SBInstanceEvent_CutBatch); ok {
		return x.CutBatch
	}
	return nil
}

func (x *SBInstanceEvent) GetBatchReady() *SBBatchReady {
	if x, ok := x.GetType().(*SBInstanceEvent_BatchReady); ok {
		return x.BatchReady
	}
	return nil
}

func (x *SBInstanceEvent) GetWaitForRequests() *SBWaitForRequests {
	if x, ok := x.GetType().(*SBInstanceEvent_WaitForRequests); ok {
		return x.WaitForRequests
	}
	return nil
}

func (x *SBInstanceEvent) GetRequestsReady() *SBRequestsReady {
	if x, ok := x.GetType().(*SBInstanceEvent_RequestsReady); ok {
		return x.RequestsReady
	}
	return nil
}

func (x *SBInstanceEvent) GetHashRequest() *SBHashRequest {
	if x, ok := x.GetType().(*SBInstanceEvent_HashRequest); ok {
		return x.HashRequest
	}
	return nil
}

func (x *SBInstanceEvent) GetHashResult() *SBHashResult {
	if x, ok := x.GetType().(*SBInstanceEvent_HashResult); ok {
		return x.HashResult
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistPreprepare() *isspbftpb.PersistPreprepare {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistPreprepare); ok {
		return x.PbftPersistPreprepare
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistPrepare() *isspbftpb.PersistPrepare {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistPrepare); ok {
		return x.PbftPersistPrepare
	}
	return nil
}

func (x *SBInstanceEvent) GetPbftPersistCommit() *isspbftpb.PersistCommit {
	if x, ok := x.GetType().(*SBInstanceEvent_PbftPersistCommit); ok {
		return x.PbftPersistCommit
	}
	return nil
}

type isSBInstanceEvent_Type interface {
	isSBInstanceEvent_Type()
}

type SBInstanceEvent_Init struct {
	Init *SBInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type SBInstanceEvent_Deliver struct {
	Deliver *SBDeliver `protobuf:"bytes,2,opt,name=deliver,proto3,oneof"`
}

type SBInstanceEvent_MessageReceived struct {
	MessageReceived *SBMessageReceived `protobuf:"bytes,3,opt,name=message_received,json=messageReceived,proto3,oneof"`
}

type SBInstanceEvent_PendingRequests struct {
	PendingRequests *SBPendingRequests `protobuf:"bytes,4,opt,name=pending_requests,json=pendingRequests,proto3,oneof"`
}

type SBInstanceEvent_Tick struct {
	Tick *SBTick `protobuf:"bytes,5,opt,name=tick,proto3,oneof"`
}

type SBInstanceEvent_CutBatch struct {
	CutBatch *SBCutBatch `protobuf:"bytes,6,opt,name=cut_batch,json=cutBatch,proto3,oneof"`
}

type SBInstanceEvent_BatchReady struct {
	BatchReady *SBBatchReady `protobuf:"bytes,7,opt,name=batch_ready,json=batchReady,proto3,oneof"`
}

type SBInstanceEvent_WaitForRequests struct {
	WaitForRequests *SBWaitForRequests `protobuf:"bytes,8,opt,name=wait_for_requests,json=waitForRequests,proto3,oneof"`
}

type SBInstanceEvent_RequestsReady struct {
	RequestsReady *SBRequestsReady `protobuf:"bytes,9,opt,name=requests_ready,json=requestsReady,proto3,oneof"`
}

type SBInstanceEvent_HashRequest struct {
	HashRequest *SBHashRequest `protobuf:"bytes,10,opt,name=hash_request,json=hashRequest,proto3,oneof"`
}

type SBInstanceEvent_HashResult struct {
	HashResult *SBHashResult `protobuf:"bytes,11,opt,name=hash_result,json=hashResult,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistPreprepare struct {
	PbftPersistPreprepare *isspbftpb.PersistPreprepare `protobuf:"bytes,12,opt,name=pbft_persist_preprepare,json=pbftPersistPreprepare,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistPrepare struct {
	PbftPersistPrepare *isspbftpb.PersistPrepare `protobuf:"bytes,13,opt,name=pbft_persist_prepare,json=pbftPersistPrepare,proto3,oneof"`
}

type SBInstanceEvent_PbftPersistCommit struct {
	PbftPersistCommit *isspbftpb.PersistCommit `protobuf:"bytes,14,opt,name=pbft_persist_commit,json=pbftPersistCommit,proto3,oneof"` //isspbftpb.PreprepareHashResult pbft_hash_result        = 15;
}

func (*SBInstanceEvent_Init) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_Deliver) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_MessageReceived) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PendingRequests) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_Tick) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_CutBatch) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_BatchReady) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_WaitForRequests) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_RequestsReady) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_HashRequest) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_HashResult) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistPreprepare) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistPrepare) isSBInstanceEvent_Type() {}

func (*SBInstanceEvent_PbftPersistCommit) isSBInstanceEvent_Type() {}

type SBInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SBInit) Reset() {
	*x = SBInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInit) ProtoMessage() {}

func (x *SBInit) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInit.ProtoReflect.Descriptor instead.
func (*SBInit) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{13}
}

type SBCutBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize uint64 `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *SBCutBatch) Reset() {
	*x = SBCutBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBCutBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBCutBatch) ProtoMessage() {}

func (x *SBCutBatch) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBCutBatch.ProtoReflect.Descriptor instead.
func (*SBCutBatch) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{14}
}

func (x *SBCutBatch) GetMaxSize() uint64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type SBBatchReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch               *requestpb.Batch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	PendingRequestsLeft uint64           `protobuf:"varint,2,opt,name=pending_requests_left,json=pendingRequestsLeft,proto3" json:"pending_requests_left,omitempty"`
}

func (x *SBBatchReady) Reset() {
	*x = SBBatchReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBBatchReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBBatchReady) ProtoMessage() {}

func (x *SBBatchReady) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBBatchReady.ProtoReflect.Descriptor instead.
func (*SBBatchReady) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{15}
}

func (x *SBBatchReady) GetBatch() *requestpb.Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SBBatchReady) GetPendingRequestsLeft() uint64 {
	if x != nil {
		return x.PendingRequestsLeft
	}
	return 0
}

type SBWaitForRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference *SBReqWaitReference     `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Requests  []*requestpb.RequestRef `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *SBWaitForRequests) Reset() {
	*x = SBWaitForRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBWaitForRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBWaitForRequests) ProtoMessage() {}

func (x *SBWaitForRequests) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBWaitForRequests.ProtoReflect.Descriptor instead.
func (*SBWaitForRequests) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{16}
}

func (x *SBWaitForRequests) GetReference() *SBReqWaitReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *SBWaitForRequests) GetRequests() []*requestpb.RequestRef {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SBReqWaitReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBReqWaitReference_Pbft
	Type isSBReqWaitReference_Type `protobuf_oneof:"type"`
}

func (x *SBReqWaitReference) Reset() {
	*x = SBReqWaitReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBReqWaitReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBReqWaitReference) ProtoMessage() {}

func (x *SBReqWaitReference) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBReqWaitReference.ProtoReflect.Descriptor instead.
func (*SBReqWaitReference) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{17}
}

func (m *SBReqWaitReference) GetType() isSBReqWaitReference_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBReqWaitReference) GetPbft() *isspbftpb.ReqWaitReference {
	if x, ok := x.GetType().(*SBReqWaitReference_Pbft); ok {
		return x.Pbft
	}
	return nil
}

type isSBReqWaitReference_Type interface {
	isSBReqWaitReference_Type()
}

type SBReqWaitReference_Pbft struct {
	Pbft *isspbftpb.ReqWaitReference `protobuf:"bytes,1,opt,name=pbft,proto3,oneof"`
}

func (*SBReqWaitReference_Pbft) isSBReqWaitReference_Type() {}

type SBRequestsReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *SBReqWaitReference `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *SBRequestsReady) Reset() {
	*x = SBRequestsReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBRequestsReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBRequestsReady) ProtoMessage() {}

func (x *SBRequestsReady) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBRequestsReady.ProtoReflect.Descriptor instead.
func (*SBRequestsReady) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{18}
}

func (x *SBRequestsReady) GetRef() *SBReqWaitReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type SBDeliver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn      uint64           `protobuf:"varint,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Batch   *requestpb.Batch `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	Aborted bool             `protobuf:"varint,3,opt,name=aborted,proto3" json:"aborted,omitempty"`
}

func (x *SBDeliver) Reset() {
	*x = SBDeliver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBDeliver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBDeliver) ProtoMessage() {}

func (x *SBDeliver) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBDeliver.ProtoReflect.Descriptor instead.
func (*SBDeliver) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{19}
}

func (x *SBDeliver) GetSn() uint64 {
	if x != nil {
		return x.Sn
	}
	return 0
}

func (x *SBDeliver) GetBatch() *requestpb.Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SBDeliver) GetAborted() bool {
	if x != nil {
		return x.Aborted
	}
	return false
}

type SBMessageReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From uint64             `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Msg  *SBInstanceMessage `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SBMessageReceived) Reset() {
	*x = SBMessageReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBMessageReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBMessageReceived) ProtoMessage() {}

func (x *SBMessageReceived) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBMessageReceived.ProtoReflect.Descriptor instead.
func (*SBMessageReceived) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{20}
}

func (x *SBMessageReceived) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SBMessageReceived) GetMsg() *SBInstanceMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

type SBPendingRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequests uint64 `protobuf:"varint,1,opt,name=numRequests,proto3" json:"numRequests,omitempty"`
}

func (x *SBPendingRequests) Reset() {
	*x = SBPendingRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBPendingRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBPendingRequests) ProtoMessage() {}

func (x *SBPendingRequests) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBPendingRequests.ProtoReflect.Descriptor instead.
func (*SBPendingRequests) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{21}
}

func (x *SBPendingRequests) GetNumRequests() uint64 {
	if x != nil {
		return x.NumRequests
	}
	return 0
}

type SBTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SBTick) Reset() {
	*x = SBTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBTick) ProtoMessage() {}

func (x *SBTick) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBTick.ProtoReflect.Descriptor instead.
func (*SBTick) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{22}
}

type SBHashResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte                `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Origin *SBInstanceHashOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBHashResult) Reset() {
	*x = SBHashResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBHashResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBHashResult) ProtoMessage() {}

func (x *SBHashResult) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBHashResult.ProtoReflect.Descriptor instead.
func (*SBHashResult) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{23}
}

func (x *SBHashResult) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SBHashResult) GetOrigin() *SBInstanceHashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   [][]byte      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Origin *SBHashOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBHashRequest) Reset() {
	*x = SBHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBHashRequest) ProtoMessage() {}

func (x *SBHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBHashRequest.ProtoReflect.Descriptor instead.
func (*SBHashRequest) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{24}
}

func (x *SBHashRequest) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SBHashRequest) GetOrigin() *SBHashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBHashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64                `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Instance uint64                `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Origin   *SBInstanceHashOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *SBHashOrigin) Reset() {
	*x = SBHashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBHashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBHashOrigin) ProtoMessage() {}

func (x *SBHashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBHashOrigin.ProtoReflect.Descriptor instead.
func (*SBHashOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{25}
}

func (x *SBHashOrigin) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SBHashOrigin) GetInstance() uint64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *SBHashOrigin) GetOrigin() *SBInstanceHashOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type SBInstanceHashOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*SBInstanceHashOrigin_PbftPreprepare
	Type isSBInstanceHashOrigin_Type `protobuf_oneof:"type"`
}

func (x *SBInstanceHashOrigin) Reset() {
	*x = SBInstanceHashOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBInstanceHashOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBInstanceHashOrigin) ProtoMessage() {}

func (x *SBInstanceHashOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBInstanceHashOrigin.ProtoReflect.Descriptor instead.
func (*SBInstanceHashOrigin) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{26}
}

func (m *SBInstanceHashOrigin) GetType() isSBInstanceHashOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SBInstanceHashOrigin) GetPbftPreprepare() *isspbftpb.PreprepareHashOrigin {
	if x, ok := x.GetType().(*SBInstanceHashOrigin_PbftPreprepare); ok {
		return x.PbftPreprepare
	}
	return nil
}

type isSBInstanceHashOrigin_Type interface {
	isSBInstanceHashOrigin_Type()
}

type SBInstanceHashOrigin_PbftPreprepare struct {
	PbftPreprepare *isspbftpb.PreprepareHashOrigin `protobuf:"bytes,1,opt,name=pbft_preprepare,json=pbftPreprepare,proto3,oneof"`
}

func (*SBInstanceHashOrigin_PbftPreprepare) isSBInstanceHashOrigin_Type() {}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64      `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Orderers []*SBStatus `protobuf:"bytes,2,rep,name=orderers,proto3" json:"orderers,omitempty"` // TODO: Represent whole status here.
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{27}
}

func (x *Status) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Status) GetOrderers() []*SBStatus {
	if x != nil {
		return x.Orderers
	}
	return nil
}

type SBStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leader uint64 `protobuf:"varint,1,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *SBStatus) Reset() {
	*x = SBStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isspb_isspb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SBStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SBStatus) ProtoMessage() {}

func (x *SBStatus) ProtoReflect() protoreflect.Message {
	mi := &file_isspb_isspb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SBStatus.ProtoReflect.Descriptor instead.
func (*SBStatus) Descriptor() ([]byte, []int) {
	return file_isspb_isspb_proto_rawDescGZIP(), []int{28}
}

func (x *SBStatus) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

var File_isspb_isspb_proto protoreflect.FileDescriptor

var file_isspb_isspb_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2f, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69, 0x73, 0x73, 0x70, 0x62, 0x1a, 0x19, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x66, 0x74, 0x70, 0x62, 0x2f, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x49, 0x53, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x02, 0x73, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x02, 0x73, 0x62, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47,
	0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x09, 0x53, 0x42, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x32, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x73, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x53, 0x42, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0f,
	0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x37,
	0x0a, 0x0c, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x62, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x62, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69,
	0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x62, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x08, 0x49, 0x53, 0x53, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x73, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x02, 0x73, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a,
	0x0d, 0x49, 0x53, 0x53, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25,
	0x0a, 0x02, 0x73, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x02, 0x73, 0x62, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x73, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x38, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x73, 0x6e, 0x22, 0x5f, 0x0a, 0x17,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x69, 0x0a,
	0x07, 0x53, 0x42, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf8, 0x06, 0x0a, 0x0f, 0x53, 0x42, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x54, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x63, 0x6b, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42,
	0x43, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x42, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x46, 0x0a, 0x11,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x42, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x70, 0x62, 0x66, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x62, 0x66, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x4d, 0x0a, 0x14, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x62, 0x66,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12,
	0x4a, 0x0a, 0x13, 0x70, 0x62, 0x66, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69,
	0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x62, 0x66, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x08, 0x0a, 0x06, 0x53, 0x42, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x27, 0x0a,
	0x0a, 0x53, 0x42, 0x43, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x42, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4c, 0x65,
	0x66, 0x74, 0x22, 0x7f, 0x0a, 0x11, 0x53, 0x42, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x42, 0x52, 0x65, 0x71, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x12, 0x53, 0x42, 0x52, 0x65, 0x71, 0x57, 0x61, 0x69, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x62, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66,
	0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x62, 0x66, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x53, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x52,
	0x65, 0x71, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x22, 0x5d, 0x0a, 0x09, 0x53, 0x42, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x73,
	0x6e, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x35, 0x0a, 0x11, 0x53, 0x42, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x08, 0x0a, 0x06, 0x53, 0x42, 0x54, 0x69, 0x63, 0x6b, 0x22, 0x5b, 0x0a, 0x0c, 0x53, 0x42, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x50, 0x0a, 0x0d, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73,
	0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x75, 0x0a, 0x0c, 0x53, 0x42, 0x48, 0x61,
	0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x73,
	0x70, 0x62, 0x2e, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22,
	0x6a, 0x0a, 0x14, 0x53, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x62, 0x66, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x73, 0x73, 0x70, 0x62, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x69, 0x73, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x42, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x73, 0x22, 0x22, 0x0a, 0x08, 0x53, 0x42, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6d, 0x69, 0x72, 0x62,
	0x66, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x69, 0x73, 0x73, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_isspb_isspb_proto_rawDescOnce sync.Once
	file_isspb_isspb_proto_rawDescData = file_isspb_isspb_proto_rawDesc
)

func file_isspb_isspb_proto_rawDescGZIP() []byte {
	file_isspb_isspb_proto_rawDescOnce.Do(func() {
		file_isspb_isspb_proto_rawDescData = protoimpl.X.CompressGZIP(file_isspb_isspb_proto_rawDescData)
	})
	return file_isspb_isspb_proto_rawDescData
}

var file_isspb_isspb_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_isspb_isspb_proto_goTypes = []interface{}{
	(*ISSMessage)(nil),                     // 0: isspb.ISSMessage
	(*RetransmitRequests)(nil),             // 1: isspb.RetransmitRequests
	(*SBMessage)(nil),                      // 2: isspb.SBMessage
	(*Checkpoint)(nil),                     // 3: isspb.Checkpoint
	(*SBInstanceMessage)(nil),              // 4: isspb.SBInstanceMessage
	(*ISSEvent)(nil),                       // 5: isspb.ISSEvent
	(*ISSHashOrigin)(nil),                  // 6: isspb.ISSHashOrigin
	(*CommitLogEntry)(nil),                 // 7: isspb.CommitLogEntry
	(*PersistCheckpoint)(nil),              // 8: isspb.PersistCheckpoint
	(*StableCheckpoint)(nil),               // 9: isspb.StableCheckpoint
	(*PersistStableCheckpoint)(nil),        // 10: isspb.PersistStableCheckpoint
	(*SBEvent)(nil),                        // 11: isspb.SBEvent
	(*SBInstanceEvent)(nil),                // 12: isspb.SBInstanceEvent
	(*SBInit)(nil),                         // 13: isspb.SBInit
	(*SBCutBatch)(nil),                     // 14: isspb.SBCutBatch
	(*SBBatchReady)(nil),                   // 15: isspb.SBBatchReady
	(*SBWaitForRequests)(nil),              // 16: isspb.SBWaitForRequests
	(*SBReqWaitReference)(nil),             // 17: isspb.SBReqWaitReference
	(*SBRequestsReady)(nil),                // 18: isspb.SBRequestsReady
	(*SBDeliver)(nil),                      // 19: isspb.SBDeliver
	(*SBMessageReceived)(nil),              // 20: isspb.SBMessageReceived
	(*SBPendingRequests)(nil),              // 21: isspb.SBPendingRequests
	(*SBTick)(nil),                         // 22: isspb.SBTick
	(*SBHashResult)(nil),                   // 23: isspb.SBHashResult
	(*SBHashRequest)(nil),                  // 24: isspb.SBHashRequest
	(*SBHashOrigin)(nil),                   // 25: isspb.SBHashOrigin
	(*SBInstanceHashOrigin)(nil),           // 26: isspb.SBInstanceHashOrigin
	(*Status)(nil),                         // 27: isspb.Status
	(*SBStatus)(nil),                       // 28: isspb.SBStatus
	(*requestpb.RequestRef)(nil),           // 29: requestpb.RequestRef
	(*isspbftpb.Preprepare)(nil),           // 30: isspbftpb.Preprepare
	(*isspbftpb.Prepare)(nil),              // 31: isspbftpb.Prepare
	(*isspbftpb.Commit)(nil),               // 32: isspbftpb.Commit
	(*requestpb.Batch)(nil),                // 33: requestpb.Batch
	(*isspbftpb.PersistPreprepare)(nil),    // 34: isspbftpb.PersistPreprepare
	(*isspbftpb.PersistPrepare)(nil),       // 35: isspbftpb.PersistPrepare
	(*isspbftpb.PersistCommit)(nil),        // 36: isspbftpb.PersistCommit
	(*isspbftpb.ReqWaitReference)(nil),     // 37: isspbftpb.ReqWaitReference
	(*isspbftpb.PreprepareHashOrigin)(nil), // 38: isspbftpb.PreprepareHashOrigin
}
var file_isspb_isspb_proto_depIdxs = []int32{
	2,  // 0: isspb.ISSMessage.sb:type_name -> isspb.SBMessage
	3,  // 1: isspb.ISSMessage.checkpoint:type_name -> isspb.Checkpoint
	1,  // 2: isspb.ISSMessage.retransmit_requests:type_name -> isspb.RetransmitRequests
	29, // 3: isspb.RetransmitRequests.requests:type_name -> requestpb.RequestRef
	4,  // 4: isspb.SBMessage.msg:type_name -> isspb.SBInstanceMessage
	30, // 5: isspb.SBInstanceMessage.pbft_preprepare:type_name -> isspbftpb.Preprepare
	31, // 6: isspb.SBInstanceMessage.pbft_prepare:type_name -> isspbftpb.Prepare
	32, // 7: isspb.SBInstanceMessage.pbft_commit:type_name -> isspbftpb.Commit
	8,  // 8: isspb.ISSEvent.persist_checkpoint:type_name -> isspb.PersistCheckpoint
	9,  // 9: isspb.ISSEvent.stable_checkpoint:type_name -> isspb.StableCheckpoint
	10, // 10: isspb.ISSEvent.persist_stable_checkpoint:type_name -> isspb.PersistStableCheckpoint
	11, // 11: isspb.ISSEvent.sb:type_name -> isspb.SBEvent
	25, // 12: isspb.ISSHashOrigin.sb:type_name -> isspb.SBHashOrigin
	7,  // 13: isspb.ISSHashOrigin.log_entry:type_name -> isspb.CommitLogEntry
	33, // 14: isspb.CommitLogEntry.batch:type_name -> requestpb.Batch
	9,  // 15: isspb.PersistStableCheckpoint.stable_checkpoint:type_name -> isspb.StableCheckpoint
	12, // 16: isspb.SBEvent.event:type_name -> isspb.SBInstanceEvent
	13, // 17: isspb.SBInstanceEvent.init:type_name -> isspb.SBInit
	19, // 18: isspb.SBInstanceEvent.deliver:type_name -> isspb.SBDeliver
	20, // 19: isspb.SBInstanceEvent.message_received:type_name -> isspb.SBMessageReceived
	21, // 20: isspb.SBInstanceEvent.pending_requests:type_name -> isspb.SBPendingRequests
	22, // 21: isspb.SBInstanceEvent.tick:type_name -> isspb.SBTick
	14, // 22: isspb.SBInstanceEvent.cut_batch:type_name -> isspb.SBCutBatch
	15, // 23: isspb.SBInstanceEvent.batch_ready:type_name -> isspb.SBBatchReady
	16, // 24: isspb.SBInstanceEvent.wait_for_requests:type_name -> isspb.SBWaitForRequests
	18, // 25: isspb.SBInstanceEvent.requests_ready:type_name -> isspb.SBRequestsReady
	24, // 26: isspb.SBInstanceEvent.hash_request:type_name -> isspb.SBHashRequest
	23, // 27: isspb.SBInstanceEvent.hash_result:type_name -> isspb.SBHashResult
	34, // 28: isspb.SBInstanceEvent.pbft_persist_preprepare:type_name -> isspbftpb.PersistPreprepare
	35, // 29: isspb.SBInstanceEvent.pbft_persist_prepare:type_name -> isspbftpb.PersistPrepare
	36, // 30: isspb.SBInstanceEvent.pbft_persist_commit:type_name -> isspbftpb.PersistCommit
	33, // 31: isspb.SBBatchReady.batch:type_name -> requestpb.Batch
	17, // 32: isspb.SBWaitForRequests.reference:type_name -> isspb.SBReqWaitReference
	29, // 33: isspb.SBWaitForRequests.requests:type_name -> requestpb.RequestRef
	37, // 34: isspb.SBReqWaitReference.pbft:type_name -> isspbftpb.ReqWaitReference
	17, // 35: isspb.SBRequestsReady.ref:type_name -> isspb.SBReqWaitReference
	33, // 36: isspb.SBDeliver.batch:type_name -> requestpb.Batch
	4,  // 37: isspb.SBMessageReceived.msg:type_name -> isspb.SBInstanceMessage
	26, // 38: isspb.SBHashResult.origin:type_name -> isspb.SBInstanceHashOrigin
	25, // 39: isspb.SBHashRequest.origin:type_name -> isspb.SBHashOrigin
	26, // 40: isspb.SBHashOrigin.origin:type_name -> isspb.SBInstanceHashOrigin
	38, // 41: isspb.SBInstanceHashOrigin.pbft_preprepare:type_name -> isspbftpb.PreprepareHashOrigin
	28, // 42: isspb.Status.orderers:type_name -> isspb.SBStatus
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_isspb_isspb_proto_init() }
func file_isspb_isspb_proto_init() {
	if File_isspb_isspb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_isspb_isspb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetransmitRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISSHashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StableCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistStableCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBCutBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBBatchReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBWaitForRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBReqWaitReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBRequestsReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBDeliver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBMessageReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBPendingRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBHashResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBHashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBInstanceHashOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isspb_isspb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SBStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_isspb_isspb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ISSMessage_Sb)(nil),
		(*ISSMessage_Checkpoint)(nil),
		(*ISSMessage_RetransmitRequests)(nil),
	}
	file_isspb_isspb_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SBInstanceMessage_PbftPreprepare)(nil),
		(*SBInstanceMessage_PbftPrepare)(nil),
		(*SBInstanceMessage_PbftCommit)(nil),
	}
	file_isspb_isspb_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ISSEvent_PersistCheckpoint)(nil),
		(*ISSEvent_StableCheckpoint)(nil),
		(*ISSEvent_PersistStableCheckpoint)(nil),
		(*ISSEvent_Sb)(nil),
	}
	file_isspb_isspb_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ISSHashOrigin_Sb)(nil),
		(*ISSHashOrigin_LogEntry)(nil),
	}
	file_isspb_isspb_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SBInstanceEvent_Init)(nil),
		(*SBInstanceEvent_Deliver)(nil),
		(*SBInstanceEvent_MessageReceived)(nil),
		(*SBInstanceEvent_PendingRequests)(nil),
		(*SBInstanceEvent_Tick)(nil),
		(*SBInstanceEvent_CutBatch)(nil),
		(*SBInstanceEvent_BatchReady)(nil),
		(*SBInstanceEvent_WaitForRequests)(nil),
		(*SBInstanceEvent_RequestsReady)(nil),
		(*SBInstanceEvent_HashRequest)(nil),
		(*SBInstanceEvent_HashResult)(nil),
		(*SBInstanceEvent_PbftPersistPreprepare)(nil),
		(*SBInstanceEvent_PbftPersistPrepare)(nil),
		(*SBInstanceEvent_PbftPersistCommit)(nil),
	}
	file_isspb_isspb_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SBReqWaitReference_Pbft)(nil),
	}
	file_isspb_isspb_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*SBInstanceHashOrigin_PbftPreprepare)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_isspb_isspb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_isspb_isspb_proto_goTypes,
		DependencyIndexes: file_isspb_isspb_proto_depIdxs,
		MessageInfos:      file_isspb_isspb_proto_msgTypes,
	}.Build()
	File_isspb_isspb_proto = out.File
	file_isspb_isspb_proto_rawDesc = nil
	file_isspb_isspb_proto_goTypes = nil
	file_isspb_isspb_proto_depIdxs = nil
}
