// Code generated by protoc-gen-go. DO NOT EDIT.
// source: requestreceiver/requestreceiver.proto

package requestreceiver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	requestpb "github.com/hyperledger-labs/mirbft/pkg/pb/requestpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ByeBye struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByeBye) Reset()         { *m = ByeBye{} }
func (m *ByeBye) String() string { return proto.CompactTextString(m) }
func (*ByeBye) ProtoMessage()    {}
func (*ByeBye) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab513c9b3159a7d, []int{0}
}

func (m *ByeBye) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByeBye.Unmarshal(m, b)
}
func (m *ByeBye) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByeBye.Marshal(b, m, deterministic)
}
func (m *ByeBye) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByeBye.Merge(m, src)
}
func (m *ByeBye) XXX_Size() int {
	return xxx_messageInfo_ByeBye.Size(m)
}
func (m *ByeBye) XXX_DiscardUnknown() {
	xxx_messageInfo_ByeBye.DiscardUnknown(m)
}

var xxx_messageInfo_ByeBye proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ByeBye)(nil), "requestreceiver.ByeBye")
}

func init() {
	proto.RegisterFile("requestreceiver/requestreceiver.proto", fileDescriptor_eab513c9b3159a7d)
}

var fileDescriptor_eab513c9b3159a7d = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x29, 0x4a, 0x4d, 0x4e, 0xcd, 0x2c, 0x4b, 0x2d, 0xd2, 0x47, 0xe3, 0xeb, 0x15,
	0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xf1, 0xa3, 0x09, 0x4b, 0x49, 0x42, 0x05, 0x0a, 0x92, 0xf4, 0xe1,
	0x2c, 0x88, 0x5a, 0x25, 0x0e, 0x2e, 0x36, 0xa7, 0xca, 0x54, 0xa7, 0xca, 0x54, 0x23, 0x2f, 0x2e,
	0xfe, 0x20, 0x88, 0x64, 0x10, 0x54, 0x9f, 0x90, 0x39, 0x17, 0x9b, 0x4f, 0x66, 0x71, 0x49, 0x6a,
	0x9e, 0x90, 0x90, 0x1e, 0x42, 0x23, 0x54, 0x95, 0x94, 0xb8, 0x1e, 0xba, 0xf5, 0x10, 0x93, 0x34,
	0x18, 0x9d, 0x2c, 0xa2, 0xcc, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5,
	0x33, 0x2a, 0x0b, 0x52, 0x8b, 0x72, 0x52, 0x53, 0xd2, 0x53, 0x8b, 0x74, 0x73, 0x12, 0x93, 0x8a,
	0xf5, 0x73, 0x33, 0x8b, 0x92, 0xd2, 0x4a, 0xf4, 0x0b, 0xb2, 0xd3, 0xd1, 0x7d, 0x90, 0xc4, 0x06,
	0x76, 0x96, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xba, 0x61, 0x4c, 0x6c, 0xeb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RequestReceiverClient is the client API for RequestReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RequestReceiverClient interface {
	Listen(ctx context.Context, opts ...grpc.CallOption) (RequestReceiver_ListenClient, error)
}

type requestReceiverClient struct {
	cc *grpc.ClientConn
}

func NewRequestReceiverClient(cc *grpc.ClientConn) RequestReceiverClient {
	return &requestReceiverClient{cc}
}

func (c *requestReceiverClient) Listen(ctx context.Context, opts ...grpc.CallOption) (RequestReceiver_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RequestReceiver_serviceDesc.Streams[0], "/requestreceiver.RequestReceiver/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &requestReceiverListenClient{stream}
	return x, nil
}

type RequestReceiver_ListenClient interface {
	Send(*requestpb.Request) error
	CloseAndRecv() (*ByeBye, error)
	grpc.ClientStream
}

type requestReceiverListenClient struct {
	grpc.ClientStream
}

func (x *requestReceiverListenClient) Send(m *requestpb.Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *requestReceiverListenClient) CloseAndRecv() (*ByeBye, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ByeBye)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RequestReceiverServer is the server API for RequestReceiver service.
type RequestReceiverServer interface {
	Listen(RequestReceiver_ListenServer) error
}

// UnimplementedRequestReceiverServer can be embedded to have forward compatible implementations.
type UnimplementedRequestReceiverServer struct {
}

func (*UnimplementedRequestReceiverServer) Listen(srv RequestReceiver_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}

func RegisterRequestReceiverServer(s *grpc.Server, srv RequestReceiverServer) {
	s.RegisterService(&_RequestReceiver_serviceDesc, srv)
}

func _RequestReceiver_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RequestReceiverServer).Listen(&requestReceiverListenServer{stream})
}

type RequestReceiver_ListenServer interface {
	SendAndClose(*ByeBye) error
	Recv() (*requestpb.Request, error)
	grpc.ServerStream
}

type requestReceiverListenServer struct {
	grpc.ServerStream
}

func (x *requestReceiverListenServer) SendAndClose(m *ByeBye) error {
	return x.ServerStream.SendMsg(m)
}

func (x *requestReceiverListenServer) Recv() (*requestpb.Request, error) {
	m := new(requestpb.Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RequestReceiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "requestreceiver.RequestReceiver",
	HandlerType: (*RequestReceiverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _RequestReceiver_Listen_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "requestreceiver/requestreceiver.proto",
}
