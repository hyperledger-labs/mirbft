#!/bin/bash
# The shebang is not necessary here, as this file is NOT supposed to run as a standalone shell script.
# It was only added for the editor to apply shell script syntax highlighting.

# This is a template for the main body of the script run on the virtual server after booting.
# The servers use a small bootstrap script (server-bootstrap-script.sh) that waits until the
# body is uploaded to the machine as a separate file and then includes the body.
# (It needs to be JSON-encoded and passed as a command-line argument. When starting only one machine, like the master,
# this does not pose any problems. For slaves, however, multiple slaves in a single command quickly exhaust the limit
# on command-line parameter length if the body of the script is passed.)

# This script runs the discoveryslave application.
# Variables starting with "ic_" need to be replaced before the script can be used.
# Currently these variables are replaced by the corresponding content using envsubst in create-tagged-slave-instances.sh

instance_tag_file=$work_dir/instance-tag
detail_file=$work_dir/instance-detail.json
ssh_key_file=$work_dir/ibmcloud-ssh-key

git_repository=git@github.com:stchrysa/mirbft.git
git_branch=iss
git_directory=mirbft # Relative path from the Go source IBM repository dir ($GOPATH/src/github.com/hyperledger-labs)

tls_directory="$work_dir/go/src/github.com/hyperledger-labs/$git_directory/deployment/tls-data"
config_file="$work_dir/go/src/github.com/hyperledger-labs/$git_directory/config/config.yml"

export GOPATH=$work_dir/go
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$work_dir/bin

echo "INITIALZING" > $status_file

echo "Changing directory to ${work_dir}"
cd $work_dir || exit 1

echo "Setting up stubborn scp."
mkdir -p "$work_dir/bin"
echo '#!/bin/bash

retry_limit=$1
shift

scp "$@"
exit_status=$?
while [ $exit_status -ne 0 ] && [ $retry_limit -gt 0 ]; do
  >&2 echo "scp failed. Retrying. Attempts left: $retry_limit"
  retry_limit=$((retry_limit - 1))
  sleep 2
  scp "$@"
  exit_status=$?
done
exit $exit_status
' > "$work_dir/bin/stubborn-scp.sh"
chmod u+x "$work_dir/bin/stubborn-scp.sh"

# This is a template file.
# The following variables (on the right-hand side of the assignments) need to be substituted by envsubst.
master_address="$ic_master_address" #e.g.: 158.177.77.22:9999
tag="$ic_tag"

echo "Installing private ssh key for cloud machine."
echo "$ic_private_ssh_key" > $ssh_key_file
chmod 0600 $ssh_key_file

echo "Disabling SSH's strict host key checking to enable non-interactive git clones over ssh."
mkdir -p ~/.ssh
echo '
Host *
    StrictHostKeyChecking no
' >> ~/.ssh/config

echo "INSTALLING" > $status_file

echo "Installing Ubuntu packages."

apt-get -y update
apt-get -y install \
	git \
	openssl \
	jq \
	graphviz

echo "Creating app folders."
mkdir -p $GOPATH/src/github.com/hyperledger-labs || exit 1
cd $GOPATH/src/github.com/hyperledger-labs || exit 1

echo "Obtaining own public IP address."
# Obtain public and private IP from instance detail.
own_public_ip=$(jq -r '.primaryIpAddress' < "$detail_file")
own_private_ip=$(jq -r '.primaryBackendIpAddress' < "$detail_file")
#own_tag=$(jq -r '.tagReferences[0].tag.name' < "$detail_file")
# Get tag from a separately uploaded file, in order not to rely on the cloud tagging system.
own_tag=$(cat "$instance_tag_file")

echo "Local instance info:"
echo "Public IP: $own_public_ip"
echo "Private IP: $own_private_ip"
echo "Tag: $own_tag"

echo "RUNNING" > $status_file
