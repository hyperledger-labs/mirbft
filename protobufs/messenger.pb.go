// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messenger.proto

package protobufs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProtocolMessage struct {
	SenderId int32 `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Sn       int32 `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*ProtocolMessage_Preprepare
	//	*ProtocolMessage_Prepare
	//	*ProtocolMessage_Commit
	//	*ProtocolMessage_PbftCheckpoint
	//	*ProtocolMessage_Viewchange
	//	*ProtocolMessage_MissingPreprepareReq
	//	*ProtocolMessage_MissingPreprepare
	//	*ProtocolMessage_Newview
	//	*ProtocolMessage_Proposal
	//	*ProtocolMessage_Vote
	//	*ProtocolMessage_Timeout
	//	*ProtocolMessage_Newseqno
	//	*ProtocolMessage_Checkpoint
	//	*ProtocolMessage_Dummy
	//	*ProtocolMessage_Multi
	//	*ProtocolMessage_BandwidthTest
	//	*ProtocolMessage_Close
	//	*ProtocolMessage_RaftVoteRequest
	//	*ProtocolMessage_RaftVoteResponse
	//	*ProtocolMessage_RaftAppendEntryRequest
	//	*ProtocolMessage_RaftAppendEntryResponse
	//	*ProtocolMessage_RaftNewseqno
	//	*ProtocolMessage_MissingEntryReq
	//	*ProtocolMessage_MissingEntry
	//	*ProtocolMessage_PbftCatchup
	//	*ProtocolMessage_HotstuffNewview
	Msg                  isProtocolMessage_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProtocolMessage) Reset()         { *m = ProtocolMessage{} }
func (m *ProtocolMessage) String() string { return proto.CompactTextString(m) }
func (*ProtocolMessage) ProtoMessage()    {}
func (*ProtocolMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99aba0cbf4e4b91, []int{0}
}

func (m *ProtocolMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolMessage.Unmarshal(m, b)
}
func (m *ProtocolMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolMessage.Marshal(b, m, deterministic)
}
func (m *ProtocolMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolMessage.Merge(m, src)
}
func (m *ProtocolMessage) XXX_Size() int {
	return xxx_messageInfo_ProtocolMessage.Size(m)
}
func (m *ProtocolMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolMessage proto.InternalMessageInfo

func (m *ProtocolMessage) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *ProtocolMessage) GetSn() int32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

type isProtocolMessage_Msg interface {
	isProtocolMessage_Msg()
}

type ProtocolMessage_Preprepare struct {
	Preprepare *PbftPreprepare `protobuf:"bytes,3,opt,name=preprepare,proto3,oneof"`
}

type ProtocolMessage_Prepare struct {
	Prepare *PbftPrepare `protobuf:"bytes,4,opt,name=prepare,proto3,oneof"`
}

type ProtocolMessage_Commit struct {
	Commit *PbftCommit `protobuf:"bytes,5,opt,name=commit,proto3,oneof"`
}

type ProtocolMessage_PbftCheckpoint struct {
	PbftCheckpoint *PbftCheckpoint `protobuf:"bytes,6,opt,name=pbft_checkpoint,json=pbftCheckpoint,proto3,oneof"`
}

type ProtocolMessage_Viewchange struct {
	Viewchange *SignedMsg `protobuf:"bytes,7,opt,name=viewchange,proto3,oneof"`
}

type ProtocolMessage_MissingPreprepareReq struct {
	MissingPreprepareReq *PbftMissingPreprepareRequest `protobuf:"bytes,8,opt,name=missing_preprepare_req,json=missingPreprepareReq,proto3,oneof"`
}

type ProtocolMessage_MissingPreprepare struct {
	MissingPreprepare *PbftMissingPreprepare `protobuf:"bytes,9,opt,name=missing_preprepare,json=missingPreprepare,proto3,oneof"`
}

type ProtocolMessage_Newview struct {
	Newview *SignedMsg `protobuf:"bytes,10,opt,name=newview,proto3,oneof"`
}

type ProtocolMessage_Proposal struct {
	Proposal *HotStuffProposal `protobuf:"bytes,11,opt,name=proposal,proto3,oneof"`
}

type ProtocolMessage_Vote struct {
	Vote *SignedMsg `protobuf:"bytes,12,opt,name=vote,proto3,oneof"`
}

type ProtocolMessage_Timeout struct {
	Timeout *Timeout `protobuf:"bytes,13,opt,name=timeout,proto3,oneof"`
}

type ProtocolMessage_Newseqno struct {
	Newseqno *PbftPreprepare `protobuf:"bytes,14,opt,name=newseqno,proto3,oneof"`
}

type ProtocolMessage_Checkpoint struct {
	Checkpoint *CheckpointMsg `protobuf:"bytes,15,opt,name=checkpoint,proto3,oneof"`
}

type ProtocolMessage_Dummy struct {
	Dummy *DummyOrdererMsg `protobuf:"bytes,16,opt,name=dummy,proto3,oneof"`
}

type ProtocolMessage_Multi struct {
	Multi *ProtocolMessageBatch `protobuf:"bytes,17,opt,name=multi,proto3,oneof"`
}

type ProtocolMessage_BandwidthTest struct {
	BandwidthTest *BandwidthTest `protobuf:"bytes,18,opt,name=bandwidth_test,json=bandwidthTest,proto3,oneof"`
}

type ProtocolMessage_Close struct {
	Close *CloseConnection `protobuf:"bytes,19,opt,name=close,proto3,oneof"`
}

type ProtocolMessage_RaftVoteRequest struct {
	RaftVoteRequest *RaftVoteRequest `protobuf:"bytes,20,opt,name=raft_vote_request,json=raftVoteRequest,proto3,oneof"`
}

type ProtocolMessage_RaftVoteResponse struct {
	RaftVoteResponse *RaftVoteResponse `protobuf:"bytes,21,opt,name=raft_vote_response,json=raftVoteResponse,proto3,oneof"`
}

type ProtocolMessage_RaftAppendEntryRequest struct {
	RaftAppendEntryRequest *RaftAppendEntryRequest `protobuf:"bytes,22,opt,name=raft_append_entry_request,json=raftAppendEntryRequest,proto3,oneof"`
}

type ProtocolMessage_RaftAppendEntryResponse struct {
	RaftAppendEntryResponse *RaftAppendEntryResponse `protobuf:"bytes,23,opt,name=raft_append_entry_response,json=raftAppendEntryResponse,proto3,oneof"`
}

type ProtocolMessage_RaftNewseqno struct {
	RaftNewseqno *RaftAppendEntryRequest `protobuf:"bytes,24,opt,name=raft_newseqno,json=raftNewseqno,proto3,oneof"`
}

type ProtocolMessage_MissingEntryReq struct {
	MissingEntryReq *MissingEntryRequest `protobuf:"bytes,25,opt,name=missing_entry_req,json=missingEntryReq,proto3,oneof"`
}

type ProtocolMessage_MissingEntry struct {
	MissingEntry *MissingEntry `protobuf:"bytes,26,opt,name=missing_entry,json=missingEntry,proto3,oneof"`
}

type ProtocolMessage_PbftCatchup struct {
	PbftCatchup *PbftCatchUp `protobuf:"bytes,27,opt,name=pbft_catchup,json=pbftCatchup,proto3,oneof"`
}

type ProtocolMessage_HotstuffNewview struct {
	HotstuffNewview *HotStuffNewView `protobuf:"bytes,28,opt,name=hotstuff_newview,json=hotstuffNewview,proto3,oneof"`
}

func (*ProtocolMessage_Preprepare) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Prepare) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Commit) isProtocolMessage_Msg() {}

func (*ProtocolMessage_PbftCheckpoint) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Viewchange) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingPreprepareReq) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingPreprepare) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Newview) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Proposal) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Vote) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Timeout) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Newseqno) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Checkpoint) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Dummy) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Multi) isProtocolMessage_Msg() {}

func (*ProtocolMessage_BandwidthTest) isProtocolMessage_Msg() {}

func (*ProtocolMessage_Close) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftVoteRequest) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftVoteResponse) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftAppendEntryRequest) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftAppendEntryResponse) isProtocolMessage_Msg() {}

func (*ProtocolMessage_RaftNewseqno) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingEntryReq) isProtocolMessage_Msg() {}

func (*ProtocolMessage_MissingEntry) isProtocolMessage_Msg() {}

func (*ProtocolMessage_PbftCatchup) isProtocolMessage_Msg() {}

func (*ProtocolMessage_HotstuffNewview) isProtocolMessage_Msg() {}

func (m *ProtocolMessage) GetMsg() isProtocolMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ProtocolMessage) GetPreprepare() *PbftPreprepare {
	if x, ok := m.GetMsg().(*ProtocolMessage_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (m *ProtocolMessage) GetPrepare() *PbftPrepare {
	if x, ok := m.GetMsg().(*ProtocolMessage_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *ProtocolMessage) GetCommit() *PbftCommit {
	if x, ok := m.GetMsg().(*ProtocolMessage_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *ProtocolMessage) GetPbftCheckpoint() *PbftCheckpoint {
	if x, ok := m.GetMsg().(*ProtocolMessage_PbftCheckpoint); ok {
		return x.PbftCheckpoint
	}
	return nil
}

func (m *ProtocolMessage) GetViewchange() *SignedMsg {
	if x, ok := m.GetMsg().(*ProtocolMessage_Viewchange); ok {
		return x.Viewchange
	}
	return nil
}

func (m *ProtocolMessage) GetMissingPreprepareReq() *PbftMissingPreprepareRequest {
	if x, ok := m.GetMsg().(*ProtocolMessage_MissingPreprepareReq); ok {
		return x.MissingPreprepareReq
	}
	return nil
}

func (m *ProtocolMessage) GetMissingPreprepare() *PbftMissingPreprepare {
	if x, ok := m.GetMsg().(*ProtocolMessage_MissingPreprepare); ok {
		return x.MissingPreprepare
	}
	return nil
}

func (m *ProtocolMessage) GetNewview() *SignedMsg {
	if x, ok := m.GetMsg().(*ProtocolMessage_Newview); ok {
		return x.Newview
	}
	return nil
}

func (m *ProtocolMessage) GetProposal() *HotStuffProposal {
	if x, ok := m.GetMsg().(*ProtocolMessage_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *ProtocolMessage) GetVote() *SignedMsg {
	if x, ok := m.GetMsg().(*ProtocolMessage_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *ProtocolMessage) GetTimeout() *Timeout {
	if x, ok := m.GetMsg().(*ProtocolMessage_Timeout); ok {
		return x.Timeout
	}
	return nil
}

func (m *ProtocolMessage) GetNewseqno() *PbftPreprepare {
	if x, ok := m.GetMsg().(*ProtocolMessage_Newseqno); ok {
		return x.Newseqno
	}
	return nil
}

func (m *ProtocolMessage) GetCheckpoint() *CheckpointMsg {
	if x, ok := m.GetMsg().(*ProtocolMessage_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (m *ProtocolMessage) GetDummy() *DummyOrdererMsg {
	if x, ok := m.GetMsg().(*ProtocolMessage_Dummy); ok {
		return x.Dummy
	}
	return nil
}

func (m *ProtocolMessage) GetMulti() *ProtocolMessageBatch {
	if x, ok := m.GetMsg().(*ProtocolMessage_Multi); ok {
		return x.Multi
	}
	return nil
}

func (m *ProtocolMessage) GetBandwidthTest() *BandwidthTest {
	if x, ok := m.GetMsg().(*ProtocolMessage_BandwidthTest); ok {
		return x.BandwidthTest
	}
	return nil
}

func (m *ProtocolMessage) GetClose() *CloseConnection {
	if x, ok := m.GetMsg().(*ProtocolMessage_Close); ok {
		return x.Close
	}
	return nil
}

func (m *ProtocolMessage) GetRaftVoteRequest() *RaftVoteRequest {
	if x, ok := m.GetMsg().(*ProtocolMessage_RaftVoteRequest); ok {
		return x.RaftVoteRequest
	}
	return nil
}

func (m *ProtocolMessage) GetRaftVoteResponse() *RaftVoteResponse {
	if x, ok := m.GetMsg().(*ProtocolMessage_RaftVoteResponse); ok {
		return x.RaftVoteResponse
	}
	return nil
}

func (m *ProtocolMessage) GetRaftAppendEntryRequest() *RaftAppendEntryRequest {
	if x, ok := m.GetMsg().(*ProtocolMessage_RaftAppendEntryRequest); ok {
		return x.RaftAppendEntryRequest
	}
	return nil
}

func (m *ProtocolMessage) GetRaftAppendEntryResponse() *RaftAppendEntryResponse {
	if x, ok := m.GetMsg().(*ProtocolMessage_RaftAppendEntryResponse); ok {
		return x.RaftAppendEntryResponse
	}
	return nil
}

func (m *ProtocolMessage) GetRaftNewseqno() *RaftAppendEntryRequest {
	if x, ok := m.GetMsg().(*ProtocolMessage_RaftNewseqno); ok {
		return x.RaftNewseqno
	}
	return nil
}

func (m *ProtocolMessage) GetMissingEntryReq() *MissingEntryRequest {
	if x, ok := m.GetMsg().(*ProtocolMessage_MissingEntryReq); ok {
		return x.MissingEntryReq
	}
	return nil
}

func (m *ProtocolMessage) GetMissingEntry() *MissingEntry {
	if x, ok := m.GetMsg().(*ProtocolMessage_MissingEntry); ok {
		return x.MissingEntry
	}
	return nil
}

func (m *ProtocolMessage) GetPbftCatchup() *PbftCatchUp {
	if x, ok := m.GetMsg().(*ProtocolMessage_PbftCatchup); ok {
		return x.PbftCatchup
	}
	return nil
}

func (m *ProtocolMessage) GetHotstuffNewview() *HotStuffNewView {
	if x, ok := m.GetMsg().(*ProtocolMessage_HotstuffNewview); ok {
		return x.HotstuffNewview
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtocolMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtocolMessage_Preprepare)(nil),
		(*ProtocolMessage_Prepare)(nil),
		(*ProtocolMessage_Commit)(nil),
		(*ProtocolMessage_PbftCheckpoint)(nil),
		(*ProtocolMessage_Viewchange)(nil),
		(*ProtocolMessage_MissingPreprepareReq)(nil),
		(*ProtocolMessage_MissingPreprepare)(nil),
		(*ProtocolMessage_Newview)(nil),
		(*ProtocolMessage_Proposal)(nil),
		(*ProtocolMessage_Vote)(nil),
		(*ProtocolMessage_Timeout)(nil),
		(*ProtocolMessage_Newseqno)(nil),
		(*ProtocolMessage_Checkpoint)(nil),
		(*ProtocolMessage_Dummy)(nil),
		(*ProtocolMessage_Multi)(nil),
		(*ProtocolMessage_BandwidthTest)(nil),
		(*ProtocolMessage_Close)(nil),
		(*ProtocolMessage_RaftVoteRequest)(nil),
		(*ProtocolMessage_RaftVoteResponse)(nil),
		(*ProtocolMessage_RaftAppendEntryRequest)(nil),
		(*ProtocolMessage_RaftAppendEntryResponse)(nil),
		(*ProtocolMessage_RaftNewseqno)(nil),
		(*ProtocolMessage_MissingEntryReq)(nil),
		(*ProtocolMessage_MissingEntry)(nil),
		(*ProtocolMessage_PbftCatchup)(nil),
		(*ProtocolMessage_HotstuffNewview)(nil),
	}
}

type ProtocolMessageBatch struct {
	Msgs                 []*ProtocolMessage `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProtocolMessageBatch) Reset()         { *m = ProtocolMessageBatch{} }
func (m *ProtocolMessageBatch) String() string { return proto.CompactTextString(m) }
func (*ProtocolMessageBatch) ProtoMessage()    {}
func (*ProtocolMessageBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99aba0cbf4e4b91, []int{1}
}

func (m *ProtocolMessageBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolMessageBatch.Unmarshal(m, b)
}
func (m *ProtocolMessageBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolMessageBatch.Marshal(b, m, deterministic)
}
func (m *ProtocolMessageBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolMessageBatch.Merge(m, src)
}
func (m *ProtocolMessageBatch) XXX_Size() int {
	return xxx_messageInfo_ProtocolMessageBatch.Size(m)
}
func (m *ProtocolMessageBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolMessageBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolMessageBatch proto.InternalMessageInfo

func (m *ProtocolMessageBatch) GetMsgs() []*ProtocolMessage {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type BandwidthTest struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BandwidthTest) Reset()         { *m = BandwidthTest{} }
func (m *BandwidthTest) String() string { return proto.CompactTextString(m) }
func (*BandwidthTest) ProtoMessage()    {}
func (*BandwidthTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99aba0cbf4e4b91, []int{2}
}

func (m *BandwidthTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BandwidthTest.Unmarshal(m, b)
}
func (m *BandwidthTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BandwidthTest.Marshal(b, m, deterministic)
}
func (m *BandwidthTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandwidthTest.Merge(m, src)
}
func (m *BandwidthTest) XXX_Size() int {
	return xxx_messageInfo_BandwidthTest.Size(m)
}
func (m *BandwidthTest) XXX_DiscardUnknown() {
	xxx_messageInfo_BandwidthTest.DiscardUnknown(m)
}

var xxx_messageInfo_BandwidthTest proto.InternalMessageInfo

func (m *BandwidthTest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type BandwidthTestAck struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BandwidthTestAck) Reset()         { *m = BandwidthTestAck{} }
func (m *BandwidthTestAck) String() string { return proto.CompactTextString(m) }
func (*BandwidthTestAck) ProtoMessage()    {}
func (*BandwidthTestAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99aba0cbf4e4b91, []int{3}
}

func (m *BandwidthTestAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BandwidthTestAck.Unmarshal(m, b)
}
func (m *BandwidthTestAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BandwidthTestAck.Marshal(b, m, deterministic)
}
func (m *BandwidthTestAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandwidthTestAck.Merge(m, src)
}
func (m *BandwidthTestAck) XXX_Size() int {
	return xxx_messageInfo_BandwidthTestAck.Size(m)
}
func (m *BandwidthTestAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BandwidthTestAck.DiscardUnknown(m)
}

var xxx_messageInfo_BandwidthTestAck proto.InternalMessageInfo

type CloseConnection struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseConnection) Reset()         { *m = CloseConnection{} }
func (m *CloseConnection) String() string { return proto.CompactTextString(m) }
func (*CloseConnection) ProtoMessage()    {}
func (*CloseConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99aba0cbf4e4b91, []int{4}
}

func (m *CloseConnection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseConnection.Unmarshal(m, b)
}
func (m *CloseConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseConnection.Marshal(b, m, deterministic)
}
func (m *CloseConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseConnection.Merge(m, src)
}
func (m *CloseConnection) XXX_Size() int {
	return xxx_messageInfo_CloseConnection.Size(m)
}
func (m *CloseConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseConnection.DiscardUnknown(m)
}

var xxx_messageInfo_CloseConnection proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProtocolMessage)(nil), "protobufs.ProtocolMessage")
	proto.RegisterType((*ProtocolMessageBatch)(nil), "protobufs.ProtocolMessageBatch")
	proto.RegisterType((*BandwidthTest)(nil), "protobufs.BandwidthTest")
	proto.RegisterType((*BandwidthTestAck)(nil), "protobufs.BandwidthTestAck")
	proto.RegisterType((*CloseConnection)(nil), "protobufs.CloseConnection")
}

func init() {
	proto.RegisterFile("messenger.proto", fileDescriptor_b99aba0cbf4e4b91)
}

var fileDescriptor_b99aba0cbf4e4b91 = []byte{
	// 920 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x95, 0x62, 0xcb, 0xb2, 0xc7, 0xba, 0x79, 0xea, 0xcb, 0x5a, 0xee, 0xc5, 0xd5, 0x4b, 0xdd,
	0x3e, 0x28, 0x81, 0x0b, 0x34, 0x68, 0x0d, 0x14, 0x90, 0x94, 0xb4, 0x0c, 0x1a, 0xbb, 0x2e, 0x9d,
	0xe6, 0xa1, 0x0f, 0x25, 0x28, 0x6a, 0x45, 0x11, 0x16, 0x77, 0x69, 0xee, 0x32, 0x82, 0x3f, 0xb7,
	0xdf, 0xd0, 0x1f, 0x28, 0x76, 0x29, 0x5e, 0xc5, 0x38, 0x05, 0x0c, 0x58, 0x9c, 0x39, 0xe7, 0xec,
	0x99, 0xe5, 0xcc, 0x48, 0xd0, 0xf5, 0xa9, 0x10, 0x94, 0xb9, 0x34, 0x1c, 0x06, 0x21, 0x97, 0x1c,
	0xf7, 0xf4, 0xbf, 0x69, 0x34, 0x17, 0xfd, 0x9e, 0xb3, 0xa0, 0xce, 0x7d, 0xc0, 0x3d, 0x26, 0xe3,
	0x64, 0x1f, 0x67, 0x91, 0xef, 0x3f, 0xf2, 0x70, 0x46, 0xc3, 0x84, 0xd0, 0x3f, 0x08, 0xa6, 0x73,
	0x59, 0x0c, 0x1d, 0x2d, 0xb8, 0x14, 0x32, 0x9a, 0xcf, 0x4b, 0xc8, 0xd0, 0x2e, 0x23, 0xdb, 0x21,
	0x7d, 0x88, 0xa8, 0x48, 0xf4, 0x5b, 0x0e, 0xf7, 0x7d, 0xce, 0xe2, 0xa7, 0xc1, 0xbf, 0x6d, 0xe8,
	0xde, 0xaa, 0x4f, 0x0e, 0x5f, 0x5e, 0x53, 0x21, 0x6c, 0x97, 0xe2, 0x19, 0xec, 0x09, 0xca, 0x66,
	0x34, 0xb4, 0xbc, 0x19, 0xa9, 0x9f, 0xd7, 0x2f, 0x1a, 0xe6, 0x6e, 0x1c, 0x78, 0x33, 0xc3, 0x0e,
	0x3c, 0x13, 0x8c, 0x3c, 0xd3, 0xd1, 0x67, 0x82, 0xe1, 0x15, 0x40, 0x10, 0x52, 0xf5, 0x67, 0x87,
	0x94, 0x6c, 0x9d, 0xd7, 0x2f, 0xf6, 0x2f, 0x4f, 0x87, 0x69, 0x81, 0xc3, 0xdb, 0xe9, 0x5c, 0xde,
	0xa6, 0x00, 0xa3, 0x66, 0xe6, 0xe0, 0x78, 0x09, 0xcd, 0x84, 0xb9, 0xad, 0x99, 0xc7, 0x15, 0xcc,
	0x98, 0x96, 0x00, 0xf1, 0x39, 0xec, 0xa8, 0x0a, 0x3c, 0x49, 0x1a, 0x9a, 0x72, 0x54, 0xa2, 0x4c,
	0x74, 0xd2, 0xa8, 0x99, 0x6b, 0x18, 0xbe, 0x82, 0xae, 0xba, 0x3e, 0x2b, 0xbb, 0x69, 0xb2, 0x53,
	0x69, 0x73, 0x92, 0x02, 0x8c, 0x9a, 0xd9, 0x09, 0x0a, 0x11, 0xfc, 0x01, 0xe0, 0x83, 0x47, 0x57,
	0xce, 0xc2, 0x66, 0x2e, 0x25, 0x4d, 0x2d, 0x70, 0x98, 0x13, 0xb8, 0xf3, 0x5c, 0x46, 0x67, 0xd7,
	0xc2, 0x55, 0x25, 0x66, 0x48, 0xb4, 0xe0, 0xd8, 0xf7, 0x84, 0xf0, 0x98, 0x6b, 0x65, 0x85, 0x5b,
	0x21, 0x7d, 0x20, 0xbb, 0x5a, 0xe3, 0x9b, 0x92, 0x89, 0xeb, 0x18, 0x9c, 0x5d, 0x99, 0x19, 0xbf,
	0x3d, 0xa3, 0x66, 0x1e, 0xfa, 0x15, 0x39, 0xfc, 0x03, 0x70, 0xf3, 0x00, 0xb2, 0xa7, 0xc5, 0xcf,
	0x3f, 0x25, 0x6e, 0xd4, 0xcc, 0x83, 0x0d, 0x55, 0x7c, 0x01, 0x4d, 0x46, 0x57, 0xaa, 0x08, 0x02,
	0x4f, 0x16, 0x9a, 0xc0, 0xf0, 0x47, 0xd8, 0x0d, 0x42, 0x1e, 0x70, 0x61, 0x2f, 0xc9, 0xbe, 0xa6,
	0x9c, 0xe5, 0x28, 0x06, 0x97, 0x77, 0xaa, 0x55, 0x6f, 0xd7, 0x10, 0xa3, 0x66, 0xa6, 0x70, 0xfc,
	0x0e, 0xb6, 0x3f, 0x70, 0x49, 0x49, 0xeb, 0xc9, 0x93, 0x34, 0x06, 0x87, 0xd0, 0x94, 0x9e, 0x4f,
	0x79, 0x24, 0x49, 0x5b, 0xc3, 0x31, 0x07, 0x7f, 0x17, 0x67, 0x94, 0xad, 0x35, 0x08, 0x5f, 0xc2,
	0x2e, 0xa3, 0x2b, 0x41, 0x1f, 0x18, 0x27, 0x9d, 0x4f, 0xb7, 0x66, 0x0a, 0xc6, 0x9f, 0x00, 0x72,
	0xed, 0xd2, 0xd5, 0x54, 0x92, 0xa3, 0x66, 0x8d, 0xb1, 0x7e, 0xe3, 0x19, 0x1a, 0x2f, 0xa1, 0xa1,
	0x47, 0x98, 0xf4, 0x34, 0xad, 0x9f, 0xa3, 0xbd, 0x52, 0xf1, 0xdf, 0xe3, 0xe9, 0x8c, 0x89, 0x31,
	0x14, 0x5f, 0x42, 0xc3, 0x8f, 0x96, 0xd2, 0x23, 0x07, 0x9a, 0xf3, 0x55, 0xde, 0x65, 0x71, 0x3a,
	0xc7, 0xb6, 0x74, 0x16, 0x8a, 0xa8, 0xf1, 0x38, 0x82, 0xce, 0xd4, 0x66, 0xb3, 0x95, 0x37, 0x93,
	0x0b, 0x4b, 0x52, 0x21, 0x09, 0x6e, 0x98, 0x1d, 0x27, 0x80, 0x77, 0x71, 0x1f, 0xb5, 0xa7, 0xf9,
	0x80, 0xf2, 0xeb, 0x2c, 0xb9, 0xa0, 0xe4, 0xb3, 0x0d, 0xbf, 0x13, 0x15, 0x9f, 0x70, 0xc6, 0xa8,
	0x23, 0x3d, 0xce, 0xd4, 0xb1, 0x1a, 0x8a, 0x06, 0xe8, 0x45, 0x63, 0xa9, 0xb7, 0x62, 0xad, 0xf7,
	0x0b, 0x39, 0xdc, 0xe0, 0x9b, 0xf6, 0x5c, 0xbe, 0xe7, 0x32, 0xd7, 0xc3, 0xdd, 0xb0, 0x18, 0xc2,
	0xdf, 0x00, 0xf3, 0x4a, 0x22, 0xe0, 0x4c, 0x50, 0x72, 0xb4, 0xd1, 0x43, 0x99, 0x54, 0x0c, 0x31,
	0x6a, 0x66, 0x2f, 0x2c, 0xc5, 0xf0, 0x6f, 0x38, 0xd5, 0x62, 0x76, 0x10, 0x50, 0x36, 0xb3, 0x28,
	0x93, 0xe1, 0x63, 0x6a, 0xef, 0x58, 0x6b, 0x7e, 0x5d, 0xd2, 0x1c, 0x69, 0xe8, 0x6b, 0x85, 0xcc,
	0x5c, 0x1e, 0x87, 0x95, 0x19, 0xb4, 0xa1, 0x5f, 0xa5, 0xbf, 0x36, 0x7d, 0xa2, 0x0f, 0x18, 0x3c,
	0x75, 0x40, 0xea, 0xfd, 0x24, 0xac, 0x4e, 0xa1, 0x01, 0x6d, 0x7d, 0x44, 0xda, 0xb7, 0xe4, 0xff,
	0xdb, 0x6e, 0x29, 0xe6, 0x4d, 0xd2, 0xc3, 0x6f, 0x21, 0x19, 0xed, 0xec, 0x22, 0xc8, 0xa9, 0x56,
	0xfb, 0x32, 0xa7, 0xb6, 0xde, 0x09, 0x25, 0xa9, 0xae, 0x5f, 0x0c, 0xe3, 0xcf, 0xd0, 0x2e, 0xa8,
	0x91, 0xbe, 0x56, 0x3a, 0xf9, 0x88, 0x92, 0x72, 0x93, 0x97, 0xc0, 0x2b, 0x68, 0xc5, 0x5b, 0x58,
	0xf5, 0x6f, 0x14, 0x90, 0xb3, 0xca, 0x7d, 0x3f, 0x51, 0xd9, 0x3f, 0x03, 0xa3, 0x66, 0xee, 0x07,
	0xc9, 0x63, 0x14, 0xe0, 0xaf, 0xd0, 0x4b, 0xbe, 0xee, 0xac, 0x64, 0x33, 0x7d, 0xbe, 0xd1, 0x6d,
	0xc9, 0x9a, 0xb9, 0xa1, 0xab, 0xf7, 0x1e, 0x5d, 0xa9, 0x2a, 0x12, 0xd6, 0x4d, 0x4c, 0x1a, 0x37,
	0x60, 0xcb, 0x17, 0xee, 0xe0, 0x17, 0x38, 0xac, 0x1a, 0x2b, 0x1c, 0xc2, 0xb6, 0x2f, 0x5c, 0x41,
	0xea, 0xe7, 0x5b, 0x25, 0xed, 0x12, 0xdc, 0xd4, 0xb8, 0xc1, 0xb7, 0xd0, 0x2e, 0x0c, 0x17, 0x12,
	0x68, 0x06, 0xf6, 0xe3, 0x92, 0xdb, 0xf1, 0x17, 0x67, 0xcb, 0x4c, 0x1e, 0x07, 0x08, 0xbd, 0x02,
	0x74, 0xe4, 0xdc, 0x0f, 0x0e, 0xa0, 0x5b, 0x9a, 0xb0, 0xcb, 0x7f, 0xea, 0xb0, 0x77, 0x9d, 0xfc,
	0x5c, 0xc0, 0xd7, 0xb0, 0xf3, 0xd6, 0x13, 0x92, 0x32, 0x7c, 0xc2, 0x4b, 0xff, 0xec, 0x63, 0xb3,
	0x3e, 0x72, 0xee, 0x2f, 0xea, 0x2f, 0xea, 0x38, 0x86, 0x66, 0xd2, 0xc1, 0x85, 0x25, 0xb6, 0xf4,
	0x28, 0x93, 0xeb, 0x4c, 0xff, 0xb4, 0x22, 0x13, 0xf7, 0xa4, 0xd6, 0x78, 0x03, 0xcd, 0x71, 0xe4,
	0xdc, 0x53, 0x29, 0xf0, 0x8b, 0xfc, 0x79, 0x3a, 0x76, 0x17, 0x4d, 0x85, 0x13, 0x7a, 0x81, 0x2a,
	0xa1, 0x68, 0x47, 0xa7, 0x47, 0x42, 0x78, 0x2e, 0xf3, 0x29, 0x93, 0x4a, 0x6a, 0xdc, 0xf9, 0xab,
	0x35, 0x7c, 0x7e, 0x95, 0x82, 0xa6, 0x3b, 0xfa, 0xe3, 0xf7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0xee, 0x73, 0xde, 0x28, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessengerClient interface {
	Listen(ctx context.Context, opts ...grpc.CallOption) (Messenger_ListenClient, error)
	Request(ctx context.Context, opts ...grpc.CallOption) (Messenger_RequestClient, error)
	Buckets(ctx context.Context, opts ...grpc.CallOption) (Messenger_BucketsClient, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) Listen(ctx context.Context, opts ...grpc.CallOption) (Messenger_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[0], "/protobufs.Messenger/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerListenClient{stream}
	return x, nil
}

type Messenger_ListenClient interface {
	Send(*ProtocolMessage) error
	Recv() (*BandwidthTestAck, error)
	grpc.ClientStream
}

type messengerListenClient struct {
	grpc.ClientStream
}

func (x *messengerListenClient) Send(m *ProtocolMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerListenClient) Recv() (*BandwidthTestAck, error) {
	m := new(BandwidthTestAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Request(ctx context.Context, opts ...grpc.CallOption) (Messenger_RequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[1], "/protobufs.Messenger/Request", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerRequestClient{stream}
	return x, nil
}

type Messenger_RequestClient interface {
	Send(*ClientRequest) error
	Recv() (*ClientResponse, error)
	grpc.ClientStream
}

type messengerRequestClient struct {
	grpc.ClientStream
}

func (x *messengerRequestClient) Send(m *ClientRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerRequestClient) Recv() (*ClientResponse, error) {
	m := new(ClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Buckets(ctx context.Context, opts ...grpc.CallOption) (Messenger_BucketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[2], "/protobufs.Messenger/Buckets", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerBucketsClient{stream}
	return x, nil
}

type Messenger_BucketsClient interface {
	Send(*BucketSubscription) error
	Recv() (*BucketAssignment, error)
	grpc.ClientStream
}

type messengerBucketsClient struct {
	grpc.ClientStream
}

func (x *messengerBucketsClient) Send(m *BucketSubscription) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerBucketsClient) Recv() (*BucketAssignment, error) {
	m := new(BucketAssignment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
type MessengerServer interface {
	Listen(Messenger_ListenServer) error
	Request(Messenger_RequestServer) error
	Buckets(Messenger_BucketsServer) error
}

// UnimplementedMessengerServer can be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (*UnimplementedMessengerServer) Listen(srv Messenger_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (*UnimplementedMessengerServer) Request(srv Messenger_RequestServer) error {
	return status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (*UnimplementedMessengerServer) Buckets(srv Messenger_BucketsServer) error {
	return status.Errorf(codes.Unimplemented, "method Buckets not implemented")
}

func RegisterMessengerServer(s *grpc.Server, srv MessengerServer) {
	s.RegisterService(&_Messenger_serviceDesc, srv)
}

func _Messenger_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Listen(&messengerListenServer{stream})
}

type Messenger_ListenServer interface {
	Send(*BandwidthTestAck) error
	Recv() (*ProtocolMessage, error)
	grpc.ServerStream
}

type messengerListenServer struct {
	grpc.ServerStream
}

func (x *messengerListenServer) Send(m *BandwidthTestAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerListenServer) Recv() (*ProtocolMessage, error) {
	m := new(ProtocolMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Request(&messengerRequestServer{stream})
}

type Messenger_RequestServer interface {
	Send(*ClientResponse) error
	Recv() (*ClientRequest, error)
	grpc.ServerStream
}

type messengerRequestServer struct {
	grpc.ServerStream
}

func (x *messengerRequestServer) Send(m *ClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerRequestServer) Recv() (*ClientRequest, error) {
	m := new(ClientRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_Buckets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Buckets(&messengerBucketsServer{stream})
}

type Messenger_BucketsServer interface {
	Send(*BucketAssignment) error
	Recv() (*BucketSubscription, error)
	grpc.ServerStream
}

type messengerBucketsServer struct {
	grpc.ServerStream
}

func (x *messengerBucketsServer) Send(m *BucketAssignment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerBucketsServer) Recv() (*BucketSubscription, error) {
	m := new(BucketSubscription)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messenger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobufs.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Messenger_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Request",
			Handler:       _Messenger_Request_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Buckets",
			Handler:       _Messenger_Buckets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
